diff --git a/rkwifibt-app/bluez/a2dp_source/a2dp_masterctrl.c b/rkwifibt-app/bluez/a2dp_source/a2dp_masterctrl.c
index 5d313c1..c17403a 100644
--- a/rkwifibt-app/bluez/a2dp_source/a2dp_masterctrl.c
+++ b/rkwifibt-app/bluez/a2dp_source/a2dp_masterctrl.c
@@ -1135,8 +1135,16 @@ static void proxy_added(GDBusProxy *proxy, void *user_data)
 	if (bt_sink_is_open()) {
 		if ((!strcmp(interface, "org.bluez.MediaPlayer1")) ||
 			(!strcmp(interface, "org.bluez.MediaFolder1")) ||
-			(!strcmp(interface, "org.bluez.MediaItem1")))
+			(!strcmp(interface, "org.bluez.MediaItem1"))) {
 			a2dp_sink_proxy_added(proxy, user_data);
+			
+			printf("xxx path: %s\n", g_dbus_proxy_get_path(proxy));
+			static int rfcomm_t = 1;
+			if (rfcomm_t) {
+				rfcomm_t = 0;
+				bt_rfcomm_thread();
+			}
+		}
 
 		if (!strcmp(interface, "org.bluez.Device1")) {
 			if ((dist_dev_class(proxy) == BT_SOURCE_DEVICE))
@@ -4770,3 +4778,114 @@ bool get_device_connected_properties(char *addr)
 
 	return is_connected;
 }
+
+#include <dbus/dbus.h>
+#include <poll.h>
+#define BLUEALSA_SERVICE           "org.bluealsa"
+#define BLUEALSA_INTERFACE_MANAGER "org.bluealsa.Manager1"
+#define BLUEALSA_INTERFACE_PCM     "org.bluealsa.PCM1"
+#define BLUEALSA_INTERFACE_RFCOMM  "org.bluealsa.RFCOMM1"
+
+static pthread_t rk_rfcomm_init_thread = 0;
+static char *strtrim(char *str) {
+	while (isspace(*str))
+		str++;
+	if (*str == '\0')
+		return str;
+	char *end = &str[strlen(str) - 1];
+	while (end > str && isspace(*end))
+		end--;
+	end[1] = '\0';
+	return str;
+}
+/* BD Address */
+typedef struct {
+	uint8_t b[6];
+} __attribute__((packed)) bdaddr_t;
+
+/**
+ * Open BlueALSA RFCOMM socket for dispatching AT commands. 
+ */
+static int rfcomm_thread_t(bdaddr_t *dev_addr)
+{
+	/* private D-Bus connection */
+	DBusConnection *conn;
+	DBusError *error;
+	char rfcomm_path[128];
+	//bdaddr_t addr = *dev_addr;
+	static int rfcomm_fd = -1;
+	printf("%s:%d\n", __func__, __LINE__);
+
+	//F8:7D:76:F2:12:F3
+	//sprintf(rfcomm_path, "/org/bluealsa/hci0/dev_F8_7D_76_F2_12_F3/rfcomm",
+	//		addr.b[5], addr.b[4], addr.b[3], addr.b[2], addr.b[1], addr.b[0]);
+
+	if ((conn = dbus_bus_get_private(DBUS_BUS_SYSTEM, error)) == NULL)
+		return FALSE;
+
+	DBusMessage *msg;
+	if ((msg = dbus_message_new_method_call(BLUEALSA_SERVICE, "/org/bluealsa/hci0/dev_F8_7D_76_F2_12_F3/rfcomm",
+					BLUEALSA_INTERFACE_RFCOMM, "Open")) == NULL) {
+		dbus_set_error(error, DBUS_ERROR_NO_MEMORY, NULL);
+		return FALSE;
+	}
+	printf("%s:%d\n", __func__, __LINE__);
+
+	DBusMessage *rep;
+	if ((rep = dbus_connection_send_with_reply_and_block(conn,
+					msg, DBUS_TIMEOUT_USE_DEFAULT, error)) == NULL) {
+		dbus_message_unref(msg);
+		return FALSE;
+	}
+	printf("%s:%d\n", __func__, __LINE__);
+
+	dbus_bool_t rv;
+	rv = dbus_message_get_args(rep, error,
+			DBUS_TYPE_UNIX_FD, &rfcomm_fd,
+			DBUS_TYPE_INVALID);
+
+	dbus_message_unref(rep);
+	dbus_message_unref(msg);
+	printf("%s:%d FD: %d\n", __func__, __LINE__, rfcomm_fd);
+
+	struct pollfd pfds[] = {
+		//{ fileno(stdin), POLLIN, 0 },
+		{ rfcomm_fd, POLLIN, 0 },
+	};
+
+	while (1) {
+		printf("%s:%d\n", __func__, __LINE__);
+		poll(pfds, 1, -1);
+		printf("%s:%d\n", __func__, __LINE__);
+		if (pfds[0].revents & POLLIN) {
+
+			char buffer[256];
+			ssize_t ret;
+			printf("%s:%d\n", __func__, __LINE__);
+			if ((ret = read(rfcomm_fd, buffer, sizeof(buffer) - 1)) <= 0) {
+				break;
+			}
+			buffer[ret] = '\0';
+			printf("%s:%d:%s\n", __func__, __LINE__, buffer);
+
+			printf("bt_rfcomm_thread: %s\n", strtrim(buffer));
+		}
+	}
+
+	return TRUE;
+}
+
+int bt_rfcomm_thread(void)
+{
+	printf("bt_rfcomm_thread 1\n");
+	if (pthread_create(&rk_rfcomm_init_thread, NULL, rfcomm_thread_t, NULL)) {
+		printf("%s: Create rk_rfcomm_init_thread thread failed\n", __func__);
+		return -1;
+	}
+	printf("bt_rfcomm_thread 2\n");
+
+	pthread_setname_np(rk_rfcomm_init_thread, "rk_rfcomm_init_thread");
+	pthread_detach(rk_rfcomm_init_thread);
+	return 0;
+}
+
diff --git a/rkwifibt-app/bluez/bt_hal.c b/rkwifibt-app/bluez/bt_hal.c
index c0c274b..0a2f818 100644
--- a/rkwifibt-app/bluez/bt_hal.c
+++ b/rkwifibt-app/bluez/bt_hal.c
@@ -1215,6 +1215,66 @@ static int _rk_bt_init(void *p)
 	return 0;
 }
 
+pthread_t thread;
+static void *ctl_thread(void *arg) {
+	int fd = (int)arg;
+	struct pollfd pfds[1];
+
+	pfds[0].fd = fd;
+
+	debug("Starting controller loop");
+	while (1) {
+		if (poll(pfds, 1, -1) == -1) {
+			error("Controller poll error: %s", strerror(errno));
+			break;
+		}
+
+		if (pfds[0].revents & POLLIN) {
+
+			errno = ETIMEDOUT;
+			if (recv(fd, &ver, sizeof(ver), MSG_DONTWAIT) != sizeof(ver)) {
+				warn("Couldn't receive protocol version: %s", strerror(errno));
+				close(fd.fd);
+			}
+		}
+	}
+}
+
+int rk_bt_init(RkBtContent *p_bt_content)
+{
+	int control_fd, client_fd;
+	struct sockaddr_un saddr = { .sun_family = AF_UNIX };
+	snprintf(saddr.sun_path, sizeof(saddr.sun_path) - 1, "/run/rkblue/hci0");
+
+	if (mkdir("/run/rkblue", 0755) == -1 && errno != EEXIST)
+		goto fail;
+
+	if ((control_fd = socket(PF_UNIX, SOCK_SEQPACKET, 0)) == -1)
+		goto fail;
+
+	if (bind(control_fd, (struct sockaddr *)(&saddr), sizeof(saddr)) == -1)
+		goto fail;
+
+	if (chmod(saddr.sun_path, 0660) == -1)
+		goto fail;
+
+	if (listen(control_fd, 2) == -1)
+		goto fail;
+
+	client_fd = accept(control_fd, NULL, NULL);
+
+	if ((errno = pthread_create(&thread, NULL, ctl_thread, client_fd)) != 0) {
+		goto fail;
+	}
+
+	/* name controller thread - for aesthetic purposes only */
+	pthread_setname_np(thread, "bactl");
+
+	while (1) {
+		sleep(1);
+	}
+}
+
 int rk_bt_init(RkBtContent *p_bt_content)
 {
 	if (rk_bt_init_thread)
diff --git a/rkwifibt-app/bluez/gdbus/object.c b/rkwifibt-app/bluez/gdbus/object.c
index e6b5b06..2bea4e2 100644
--- a/rkwifibt-app/bluez/gdbus/object.c
+++ b/rkwifibt-app/bluez/gdbus/object.c
@@ -19,7 +19,6 @@
 #include <dbus/dbus.h>
 
 #include "gdbus.h"
-#include "slog.h"
 
 #define info(fmt...)
 #define error(fmt...)
@@ -29,14 +28,6 @@
 #include <sys/types.h>
 #include <sys/syscall.h>
 
-pid_t gettid(void)
-{
-	return (pid_t)syscall(__NR_gettid);
-}
-
-#undef pr_info
-#define pr_info(fmt, args...)
-
 #define DBUS_INTERFACE_OBJECT_MANAGER "org.freedesktop.DBus.ObjectManager"
 
 #ifndef DBUS_ERROR_UNKNOWN_PROPERTY
@@ -255,7 +246,6 @@ static DBusHandlerResult process_message(DBusConnection *connection,
 							void *iface_user_data)
 {
 	DBusMessage *reply;
-	pr_info("### [0x%x]%s %d ###\n", gettid(), __func__, __LINE__);
 
 	reply = method->function(connection, message, iface_user_data);
 
@@ -502,7 +492,6 @@ static void append_property(struct interface_data *iface,
 			const GDBusPropertyTable *p, DBusMessageIter *dict)
 {
 	DBusMessageIter entry, value;
-	pr_info("### [0x%x]%s %d iface:%p:%s ###\n", gettid(), __func__, __LINE__, iface, p->name);
 
 	dbus_message_iter_open_container(dict, DBUS_TYPE_DICT_ENTRY, NULL,
 								&entry);
@@ -521,7 +510,6 @@ static void append_properties(struct interface_data *data,
 {
 	DBusMessageIter dict;
 	const GDBusPropertyTable *p;
-	pr_info("### [START] [0x%x]%s %d iface:%p ###\n", gettid(), __func__, __LINE__, data);
 
 	dbus_message_iter_open_container(iter, DBUS_TYPE_ARRAY,
 				DBUS_DICT_ENTRY_BEGIN_CHAR_AS_STRING
@@ -543,7 +531,6 @@ static void append_properties(struct interface_data *data,
 		append_property(data, p, &dict);
 	}
 
-	pr_info("### [END] [0x%x]%s %d iface:%p ###\n", gettid(), __func__, __LINE__, data);
 	dbus_message_iter_close_container(iter, &dict);
 }
 
@@ -552,12 +539,9 @@ static void append_interface(gpointer data, gpointer user_data)
 	struct interface_data *iface = data;
 	DBusMessageIter *array = user_data;
 	DBusMessageIter entry;
-	pr_info("### [0x%x]%s %d iface:%p ###\n", gettid(), __func__, __LINE__, data);
 
 	dbus_message_iter_open_container(array, DBUS_TYPE_DICT_ENTRY, NULL,
 								&entry);
-	if (iface->name)
-		pr_info("### [0x%x]%s %d iface:%p name: %s ###\n", gettid(), __func__, __LINE__, data, iface->name);
 	dbus_message_iter_append_basic(&entry, DBUS_TYPE_STRING, &iface->name);
 	append_properties(data, &entry);
 	dbus_message_iter_close_container(array, &entry);
@@ -567,7 +551,6 @@ static void emit_interfaces_added(struct generic_data *data)
 {
 	DBusMessage *signal;
 	DBusMessageIter iter, array;
-	pr_info("### [START] [0x%x]%s %d data:%p ###\n", gettid(), __func__, __LINE__, data);
 
 	if (root == NULL || data == root)
 		return;
@@ -607,7 +590,6 @@ static void emit_interfaces_added(struct generic_data *data)
 	/* Use dbus_connection_send to avoid recursive calls to g_dbus_flush */
 	dbus_connection_send(data->conn, signal, NULL);
 	dbus_message_unref(signal);
-	pr_info("### [END] [0x%x]%s %d data:%p ###\n", gettid(), __func__, __LINE__, data);
 }
 
 static struct interface_data *find_interface(GSList *interfaces,
@@ -652,7 +634,6 @@ static void add_pending(struct generic_data *data)
 {
 	guint old_id = data->process_id;
 	gboolean ret;
-	pr_info("### [0x%x]%s %d data:%p ###\n", gettid(), __func__, __LINE__, data);
 
 	//data->process_id = g_idle_add(process_changes, data);
 	process_changes(data);
@@ -664,19 +645,15 @@ static void add_pending(struct generic_data *data)
 		 * no need to re-add it to the pending list.
 		 */
 		ret = g_source_remove(old_id);
-		pr_info("### [0x%x]%s %d data:%p %d ###\n", gettid(), __func__, __LINE__, data, ret);
 		return;
 	}
 
-	pr_info("### [0x%x]%s %d data:%p[s: %d] ###\n", gettid(), __func__, __LINE__, data, g_slist_length(pending));
 	pending = g_slist_append(pending, data);
-	pr_info("### [0x%x]%s %d data:%p[e: %d] ###\n", gettid(), __func__, __LINE__, data, g_slist_length(pending));
 }
 
 static gboolean remove_interface(struct generic_data *data, const char *name)
 {
 	struct interface_data *iface;
-	pr_info("### [0x%x]%s %d data:%p ###\n", gettid(), __func__, __LINE__, data);
 
 	iface = find_interface(data->interfaces, name);
 	if (iface == NULL)
@@ -977,7 +954,6 @@ static void append_name(gpointer data, gpointer user_data)
 {
 	char *name = data;
 	DBusMessageIter *iter = user_data;
-	pr_info("### %s %d ###\n", __func__, __LINE__);
 
 	dbus_message_iter_append_basic(iter, DBUS_TYPE_STRING, &name);
 }
@@ -986,7 +962,6 @@ static void emit_interfaces_removed(struct generic_data *data)
 {
 	DBusMessage *signal;
 	DBusMessageIter iter, array;
-	pr_info("### [0x%x]%s %d data:%p ###\n", gettid(), __func__, __LINE__, data);
 
 	if (root == NULL || data == root)
 		return;
@@ -1021,15 +996,12 @@ static void remove_pending(struct generic_data *data)
 		data->process_id = 0;
 	}
 
-	pr_info("### [0x%x]%s %d data:%p[s: %d] ###\n", gettid(), __func__, __LINE__, data, g_slist_length(pending));
 	pending = g_slist_remove(pending, data);
-	pr_info("### [0x%x]%s %d data:%p[e: %d] ###\n", gettid(), __func__, __LINE__, data, g_slist_length(pending));
 }
 
 static gboolean process_changes(gpointer user_data)
 {
 	struct generic_data *data = user_data;
-	pr_info("### [0x%x]%s %d data:%p ###\n", gettid(), __func__, __LINE__, data);
 
 	//remove_pending(data);
 
@@ -1052,7 +1024,6 @@ static void generic_unregister(DBusConnection *connection, void *user_data)
 {
 	struct generic_data *data = user_data;
 	struct generic_data *parent = data->parent;
-	pr_info("### [0x%x]%s %d data:%p ###\n", gettid(), __func__, __LINE__, data);
 
 	if (parent != NULL)
 		parent->objects = g_slist_remove(parent->objects, data);
@@ -1147,7 +1118,6 @@ static void append_object(gpointer data, gpointer user_data)
 	struct generic_data *child = data;
 	DBusMessageIter *array = user_data;
 	DBusMessageIter entry;
-	pr_info("### [0x%x]%s %d data:%p ###\n", gettid(), __func__, __LINE__, data);
 
 	dbus_message_iter_open_container(array, DBUS_TYPE_DICT_ENTRY, NULL,
 								&entry);
@@ -1222,7 +1192,6 @@ static gboolean add_interface(struct generic_data *data,
 	const GDBusMethodTable *method;
 	const GDBusSignalTable *signal;
 	const GDBusPropertyTable *property;
-	pr_info("### [0x%x]%s %d data:%p ###\n", gettid(), __func__, __LINE__, data);
 
 	for (method = methods; method && method->name; method++) {
 		if (!check_experimental(method->flags,
@@ -1258,7 +1227,6 @@ done:
 	if (data->parent == NULL)
 		return TRUE;
 
-	pr_info("### [0x%x]%s %d data:%p iface:%p:%s ###\n", gettid(), __func__, __LINE__, data, iface, iface->name);
 	data->added = g_slist_append(data->added, iface);
 
 	add_pending(data);
@@ -1296,7 +1264,6 @@ static struct generic_data *object_path_ref(DBusConnection *connection,
 	}
 
 	invalidate_parent_data(connection, path);
-	pr_info("### [0x%x]%s %d data:%p ###\n", gettid(), __func__, __LINE__, data);
 
 	add_interface(data, DBUS_INTERFACE_INTROSPECTABLE, introspect_methods,
 						NULL, NULL, data, NULL);
@@ -1378,7 +1345,6 @@ gboolean g_dbus_register_interface(DBusConnection *connection,
 					GDBusDestroyFunction destroy)
 {
 	struct generic_data *data;
-	pr_info("### [0x%x]%s enter ###\n", gettid(), __func__);
 
 	if (!dbus_validate_path(path, NULL)) {
 		error("Invalid object path: %s", path);
@@ -1393,7 +1359,6 @@ gboolean g_dbus_register_interface(DBusConnection *connection,
 	data = object_path_ref(connection, path);
 	if (data == NULL)
 		return FALSE;
-	pr_info("### [0x%x]%s %d data:%p ###\n", gettid(), __func__, __LINE__, data);
 
 	if (find_interface(data->interfaces, name)) {
 		object_path_unref(connection, path);
@@ -1534,13 +1499,11 @@ static void g_dbus_flush(DBusConnection *connection)
 
 	for (l = pending; l;) {
 		struct generic_data *data = l->data;
-		pr_info("### [0x%x]%s %d data:%p[s: %d] ###\n", gettid(), __func__, __LINE__, data, g_slist_length(pending));
 
 		l = l->next;
 		if (data->conn != connection)
 			continue;
 
-		pr_info("### [0x%x]%s %d data:%p ###\n", gettid(), __func__, __LINE__, data);
 		process_changes(data);
 	}
 }
@@ -1564,7 +1527,6 @@ gboolean g_dbus_send_message(DBusConnection *connection, DBusMessage *message)
 			goto out;
 	}
 
-	pr_info("### [0x%x]%s %d ###\n", gettid(), __func__, __LINE__);
 	/* Flush pending signal to guarantee message order */
 	g_dbus_flush(connection);
 
@@ -1582,7 +1544,6 @@ gboolean g_dbus_send_message_with_reply(DBusConnection *connection,
 {
 	dbus_bool_t ret;
 
-	pr_info("### [0x%x]%s %d ###\n", gettid(), __func__, __LINE__);
 	/* Flush pending signal to guarantee message order */
 	g_dbus_flush(connection);
 
@@ -1713,7 +1674,6 @@ static void process_properties_from_interface(struct generic_data *data,
 	DBusMessage *signal;
 	DBusMessageIter iter, dict, array;
 	GSList *invalidated;
-	pr_info("### [0x%x]%s %d data:%p ###\n", gettid(), __func__, __LINE__, data);
 
 	if (iface->pending_prop == NULL)
 		return;
@@ -1800,7 +1760,6 @@ void g_dbus_emit_property_changed_full(DBusConnection *connection,
 	if (!dbus_connection_get_object_path_data(connection, path,
 					(void **) &data) || data == NULL)
 		return;
-	pr_info("### [0x%x]%s %d data:%p ###\n", gettid(), __func__, __LINE__, data);
 
 	iface = find_interface(data->interfaces, interface);
 	if (iface == NULL)
@@ -1868,7 +1827,6 @@ gboolean g_dbus_attach_object_manager(DBusConnection *connection)
 	data = object_path_ref(connection, "/");
 	if (data == NULL)
 		return FALSE;
-	pr_info("### [0x%x]%s %d data:%p ###\n", gettid(), __func__, __LINE__, data);
 
 	add_interface(data, DBUS_INTERFACE_OBJECT_MANAGER,
 					manager_methods, manager_signals,
