diff --git a/rkwifibt-app/bluez/a2dp_source/a2dp_masterctrl.c b/rkwifibt-app/bluez/a2dp_source/a2dp_masterctrl.c
index 5d313c1..af8ef53 100644
--- a/rkwifibt-app/bluez/a2dp_source/a2dp_masterctrl.c
+++ b/rkwifibt-app/bluez/a2dp_source/a2dp_masterctrl.c
@@ -1400,8 +1400,8 @@ static void device_connected_handler(GDBusProxy *proxy,
 				if (g_dbus_proxy_get_property(proxy, "AddressType", iter)) {
 					dbus_message_iter_get_basic(iter, &type);
 					pr_info("%s: AddressType = %s\n", __func__, type);
-					if(!strcmp(type, "public"))
-						remove_device(proxy);
+					//if(!strcmp(type, "public"))
+					//	remove_device(proxy);
 				}
 			}
 		} 
diff --git a/rkwifibt-app/bluez/a2dp_source/advertising.c b/rkwifibt-app/bluez/a2dp_source/advertising.c
index 9f0af74..9e9576d 100644
--- a/rkwifibt-app/bluez/a2dp_source/advertising.c
+++ b/rkwifibt-app/bluez/a2dp_source/advertising.c
@@ -64,6 +64,9 @@ static struct ad {
 	bool registered;
 	char *type;
 	char *local_name;
+	char *secondary;
+	uint32_t min_interval;
+	uint32_t max_interval;
 	uint16_t local_appearance;
 	uint16_t duration;
 	uint16_t timeout;
@@ -441,6 +444,50 @@ static gboolean get_discoverable_timeout(const GDBusPropertyTable *property,
 	return TRUE;
 }
 
+static gboolean secondary_exists(const GDBusPropertyTable *property, void *data)
+{
+	return ad.secondary ? TRUE : FALSE;
+}
+
+static gboolean get_secondary(const GDBusPropertyTable *property,
+					DBusMessageIter *iter, void *user_data)
+{
+	dbus_message_iter_append_basic(iter, DBUS_TYPE_STRING,
+							&ad.secondary);
+
+	return TRUE;
+}
+
+static gboolean min_interval_exists(const GDBusPropertyTable *property,
+							void *data)
+{
+	return ad.min_interval;
+}
+
+static gboolean get_min_interval(const GDBusPropertyTable *property,
+				DBusMessageIter *iter, void *user_data)
+{
+	dbus_message_iter_append_basic(iter, DBUS_TYPE_UINT32,
+						&ad.min_interval);
+
+	return TRUE;
+}
+
+static gboolean max_interval_exists(const GDBusPropertyTable *property,
+							void *data)
+{
+	return ad.max_interval;
+}
+
+static gboolean get_max_interval(const GDBusPropertyTable *property,
+				DBusMessageIter *iter, void *user_data)
+{
+	dbus_message_iter_append_basic(iter, DBUS_TYPE_UINT32,
+						&ad.max_interval);
+
+	return TRUE;
+}
+
 static const GDBusPropertyTable ad_props[] = {
 	{ "Type", "s", get_type },
 	{ "ServiceUUIDs", "as", get_uuids, NULL, uuids_exists },
@@ -454,8 +501,11 @@ static const GDBusPropertyTable ad_props[] = {
 	{ "Includes", "as", get_includes, NULL, includes_exists },
 	{ "LocalName", "s", get_local_name, NULL, local_name_exits },
 	{ "Appearance", "q", get_appearance, NULL, appearance_exits },
+	{ "MinInterval", "u", get_min_interval, NULL, min_interval_exists },
+	{ "MaxInterval", "u", get_max_interval, NULL, max_interval_exists },
 	{ "Duration", "q", get_duration, NULL, duration_exits },
 	{ "Timeout", "q", get_timeout, NULL, timeout_exits },
+	{ "SecondaryChannel", "s", get_secondary, NULL, secondary_exists },
 	{ }
 };
 
@@ -956,6 +1006,16 @@ void iBle_init_adv(DBusConnection *dbus_conn, RkBtContent *bt_content)
 	ad.manufacturer.data.len = 16;
 	g_dbus_emit_property_changed_full(dbus_conn, AD_PATH, AD_IFACE, "ManufacturerData", G_DBUS_PROPERTY_CHANGED_FLAG_FLUSH);
 
+	//if (ad.secondary)
+	//	free(ad.secondary);
+	//ad.secondary = strdup("2M"); //"[1M/2M/Coded]"
+	//g_dbus_emit_property_changed_full(dbus_conn, AD_PATH, AD_IFACE, "SecondaryChannel", G_DBUS_PROPERTY_CHANGED_FLAG_FLUSH);
+
+	ad.min_interval = 30;
+	g_dbus_emit_property_changed_full(dbus_conn, AD_PATH, AD_IFACE, "MinInterval", G_DBUS_PROPERTY_CHANGED_FLAG_FLUSH);
+	ad.max_interval = 50;
+	g_dbus_emit_property_changed_full(dbus_conn, AD_PATH, AD_IFACE, "MaxInterval", G_DBUS_PROPERTY_CHANGED_FLAG_FLUSH);
+
 	//custom data
 	//todo
 }
diff --git a/rkwifibt-app/bluez/bluez_ctrl.c b/rkwifibt-app/bluez/bluez_ctrl.c
index 5e5d457..0a98f27 100644
--- a/rkwifibt-app/bluez/bluez_ctrl.c
+++ b/rkwifibt-app/bluez/bluez_ctrl.c
@@ -284,12 +284,12 @@ start:
 
 		exec_command_system("hcidump -i hci0 -w /tmp/btsnoop.log &");
 
-		if (run_task("bluetoothd", "/usr/libexec/bluetooth/bluetoothd -P battery -C -n -d &")) {
+		if (run_task("bluetoothd", "/usr/libexec/bluetooth/bluetoothd -C -n -d &")) {
 			pr_err("open bt server failed! error: bluetoothd failed!\n");
 			return -1;
 		}
 	} else {
-		if (run_task("bluetoothd", "/usr/libexec/bluetooth/bluetoothd -P battery -C -n &")) {
+		if (run_task("bluetoothd", "/usr/libexec/bluetooth/bluetoothd -C -n &")) {
 			pr_err("open bt server failed! error: bluetoothd failed!\n");
 			return -1;
 		}
diff --git a/rkwifibt-app/bluez/gatt_config.c b/rkwifibt-app/bluez/gatt_config.c
index 1b6d413..ccc593b 100644
--- a/rkwifibt-app/bluez/gatt_config.c
+++ b/rkwifibt-app/bluez/gatt_config.c
@@ -1034,9 +1034,9 @@ int ble_enable_adv(void)
 		ble_init_state = 1;
 	//execute(CMD_EN, ret_buff, 1024);
 #else
-	exec_command_system("echo 160 > /sys/kernel/debug/bluetooth/hci0/adv_min_interval");
+	exec_command_system("echo 80 > /sys/kernel/debug/bluetooth/hci0/adv_min_interval");
 	usleep(300 * 1000);
-	exec_command_system("echo 160 > /sys/kernel/debug/bluetooth/hci0/adv_max_interval");
+	exec_command_system("echo 100 > /sys/kernel/debug/bluetooth/hci0/adv_max_interval");
 	usleep(300 * 1000);
 
 	iBle_advertise(1);
@@ -1060,6 +1060,7 @@ void ble_disable_adv(void)
 //ble 4.x
 int gatt_set_on_adv(void)
 {
+#ifdef BLE_ADV_4X
 	char ret_buff[1024];
 	char CMD_ADV_DATA[128] = "hcitool -i hci0 cmd 0x08 0x0008";
 	char CMD_ADV_RESP_DATA[128] = "hcitool -i hci0 cmd 0x08 0x0009";
@@ -1113,10 +1114,11 @@ int gatt_set_on_adv(void)
 
 	// LE Set Advertise Enable Command
 	execute(CMD_EN, ret_buff, 1024);
-
+#else
+	//iBle_advertise(1);
+#endif
 	return 0;
 }
-
 static void register_app_reply(DBusMessage *reply, void *user_data)
 {
 	DBusError derr;
diff --git a/rkwifibt-app/test/bt_test.c b/rkwifibt-app/test/bt_test.c
index 7eea5b7..0af0e5a 100644
--- a/rkwifibt-app/test/bt_test.c
+++ b/rkwifibt-app/test/bt_test.c
@@ -243,10 +243,10 @@ void *bt_test_bluetooth_init_thread(void *arg)
 	bt_content.ble_content.server_uuid.len = UUID_128;
 	bt_content.ble_content.chr_uuid[0].uuid = BLE_UUID_SEND;
 	bt_content.ble_content.chr_uuid[0].len = UUID_128;
-	bt_content.ble_content.chr_uuid[0].flags = UUID_READ | UUID_WIRTE | UUID_NOTIFY | UUID_INDICATE | UUID_WRITE_WITHOUT_RESP;
+	bt_content.ble_content.chr_uuid[0].flags = UUID_READ | UUID_WIRTE | UUID_WRITE_WITHOUT_RESP;
 	bt_content.ble_content.chr_uuid[1].uuid = BLE_UUID_RECV;
 	bt_content.ble_content.chr_uuid[1].len = UUID_128;
-	bt_content.ble_content.chr_uuid[1].flags = UUID_READ | UUID_WIRTE | UUID_NOTIFY | UUID_INDICATE | UUID_WRITE_WITHOUT_RESP;
+	bt_content.ble_content.chr_uuid[1].flags = UUID_READ | UUID_WIRTE | UUID_WRITE_WITHOUT_RESP;
 	bt_content.ble_content.chr_cnt = 2;
 
 	bt_content.ble_content.advDataType = BLE_ADVDATA_TYPE_USER;
